// This file is generated by Save As Snippet
// For detail, check vscode snippet syntax 
// https://code.visualstudio.com/docs/editor/userdefinedsnippets#_creating-your-own-snippets
{
	"Get Users Of Group": {
	  "prefix": "Get Users Of Group",
	  "scope": "sql",
	  "body": [
		"DECLARE @MyTempTable TABLE\r",
		"(\r",
		"\tEntityId int\r",
		");\r",
		"\t\r",
		"INSERT INTO @MyTempTable\r",
		"EXEC [Security].[GetUsersOfGroup] '$1'\r",
		"SELECT Trigram, Lastname + ' ' + Firstname AS 'Full Name' FROM Employee WHERE EmployeeId IN (SELECT EntityId FROM @MyTempTable)"
	  ],
	  "description": "Get Users Of A Group"
	},
	"Update Permission all item in table": {
	  "prefix": "Update Permission",
	  "scope": "sql",
	  "body": [
		"EXEC Security.UpdatePermAllItems  @TableName = N'$1', @SchemaName = N'dbo'"
	  ],
	  "description": "Security.UpdatePermAllItems"
	},
	"Get Executive Assistant": {
	  "prefix": "Get Executive Assistant",
	  "scope": "sql",
	  "body": [
		"DECLARE @MyTempTable TABLE\r",
		"(\r",
		"\t[EmployeeId] [int] NOT NULL,\t[Email] [nvarchar](100) NULL,\t[Login] [nvarchar](150) NULL,\t[Firstname] [nvarchar](50) NOT NULL,\t[Lastname] [nvarchar](50) NOT NULL,\r",
		"\t[ManagerId] [int] NULL,\t[WorkingForId] [int] NULL,\t[EmployedById] [int] NOT NULL,\t[HostCompanyId] [int] NULL,\t[Trigram] [nchar](5) NULL,\r",
		"\t[ManagerTrigram] [nchar](5) NULL,\t[UpdatedDate] [datetime2](7) NULL,\t[CreatedBy] [int] NULL,\t[UpdatedBy] [int] NULL,\t[CreatedDate] [datetime2](7) NULL,\r",
		"\t[EmployeeTypeId] [int] NULL,\t[EmployeeStatusId] [int] NULL,\t[EntryDate] [datetime2](7) NULL,\t[LocationId] [int] NULL,\r",
		"\t[EvaluationDate] [datetime2](7) NULL,\t[CandidateId] [int] NULL,\t[TransferDate] [datetime2](7) NULL,\t[ExitDate] [datetime2](7) NULL,\r",
		"\t[Disabled] [bit] NOT NULL,\t[RoleReadId] [int] NULL,\t[RoleContributeId] [int] NULL,\t[OfficeId] [int] NULL,\t[AdminFileId] [int] NOT NULL,\r",
		"\t[RoleId] [bigint] NULL\r",
		");\r",
		"\t\r",
		"INSERT INTO @MyTempTable\r",
		"EXEC [Security].[GetExecutiveAssistants] $1\r",
		"\r",
		"SELECT MT.EmployeeId, MT.Lastname + ' ' + MT.Firstname 'Employee Full Name', DT.Label\r",
		"FROM @MyTempTable MT \r",
		"JOIN Employee_Delegation ED ON MT.EmployeeId = ED.ExecutiveAssistantId AND ED.[Disabled] <> 1\r",
		"JOIN [Security].DelegationType DT ON ED.TypeId = DT.DelegationTypeId\r",
		"WHERE ED.EmployeeId = $2"
	  ],
	  "description": "Get Executive Assistant"
	},
	"Update ACL": {
	  "prefix": "Update ACL",
	  "scope": "sql",
	  "body": [
		"UPDATE [Security].[ACL]\r",
		"SET IsValidated = $1\r",
		"WHERE ACLId =$2\r",
		"\r",
		"EXEC Security.UpdatePermAllItems  @TableName = N'Employee', @SchemaName = N'dbo'"
	  ],
	  "description": ""
	},
	"Fix SID Different": {
	  "prefix": "Fix SID Different",
	  "scope": "sql",
	  "body": [
		"DECLARE @Command VARCHAR(MAX) = 'ALTER AUTHORIZATION ON DATABASE::[SMART_Amaris] TO \r",
		"[hdang-pc\\hdang]' \r",
		"\r",
		"SELECT @Command = REPLACE(REPLACE(@Command \r",
		"            , 'SMART_Amaris', SD.Name)\r",
		"            , 'hdang-pc\\hdang', SL.Name)\r",
		"FROM master..sysdatabases SD \r",
		"JOIN master..syslogins SL ON  SD.SID = SL.SID\r",
		"WHERE  SD.Name = DB_NAME()\r",
		"\r",
		"PRINT @Command\r",
		"EXEC(@Command)\r",
		"\r",
		"CREATE AGGREGATE [dbo].[SumFlag]\r",
		"(@flag [int])\r",
		"RETURNS[int]\r",
		"EXTERNAL NAME [SumFlag].[SumFlag]\r",
		"GO\r",
		"\r",
		"CREATE ASSEMBLY [SumFlag]\r",
		"FROM 0xr",
		"WITH PERMISSION_SET = SAFE\r",
		"GO"
	  ],
	  "description": "The database owner SID recorded in the master database differs from the database owner SID recorded"
	},  
	"Restore From Backup": {
	  "prefix": "Restore From Backup",
	  "scope": "sql",
	  "body": [
		"USE master\r",
		"ALTER DATABASE SMART_Amaris\r",
		"Modify Name = SMART_Amaris_Old;\r",
		" \r",
		"ALTER DATABASE SMART_Amaris_TO_CLEAN\r",
		"Modify Name = SMART_Amaris;\r",
		" \r",
		"USE SMART_Amaris\r",
		"UPDATE [dbo].[Employee]\r",
		"SET Login = \r",
		"'hdang-pc\\hdang'\t\t\t  -- AT WORK\r",      
		"WHERE EmployeeId = 6424\r",
		"\r"
	  ],
	  "description": "Restore info after Backup"
	},
	"Search For Employee": {
	  "prefix": "Search For Employee",
	  "scope": "sql",
	  "body": [
		"DECLARE @employeeid int = 5183\r",
		"DECLARE @trigram varchar(max) = ''\r",
		"DECLARE @lastname varchar(max) = ''\r",
		"DECLARE @firstname varchar(max) = ''\r",
		"DECLARE @managerid int = 0\r",
		"DECLARE @managertrg varchar(max) = ''\r",
		"DECLARE @managerlname varchar(max) = ''\r",
		"DECLARE @managerfname varchar(max) = ''\r",
		"\r",
		"SELECT emp.EmployeeId, emp.Trigram 'Emp Trigram', \r",
		"emp.Lastname + ' ' + emp.Firstname 'Employee Fullname',\r",
		"man.EmployeeId 'ManagerId', man.Trigram 'Manager Trigram'\r",
		", man.Lastname + ' ' + man.Firstname 'Manager Fullname'\r",
		", EMP.[Disabled]\r",
		"FROM Employee emp JOIN Employee man ON emp.ManagerId = man.EmployeeId\r",
		"WHERE @employeeid <> 0 AND emp.EmployeeId = @employeeid\r",
		"    OR @trigram <> '' AND emp.Trigram = @trigram\r",
		"    OR @lastname <> '' AND emp.Lastname LIKE @lastname\r",
		"    OR @firstname <> '' AND emp.Firstname LIKE @firstname\r",
		"    OR @managerid <> 0 AND emp.ManagerId = @managerid\r",
		"    OR @managertrg <> '' AND man.Trigram = @managertrg\r",
		"    OR @managerlname <> '' AND man.Lastname LIKE @managerlname\r",
		"    OR @managerfname <> '' AND man.Firstname LIKE @managerfname"
	  ],
	  "description": "Search employee"
	},
	"Transfer Analysis": {
	  "prefix": "Transfer Analysis",
	  "scope": "sql",
	  "body": [
		"DECLARE @employeeid int = 1643\r",
		"DECLARE @managerTypeId int = 2\r",
		"DECLARE @trigram varchar(max) = ''\r",
		"DECLARE @lastname varchar(max) = ''\r",
		"DECLARE @firstname varchar(max) = ''\r",
		"DECLARE @managerid int = 0\r",
		"DECLARE @managertrg varchar(max) = ''\r",
		"DECLARE @managerlname varchar(max) = ''\r",
		"DECLARE @managerfname varchar(max) = ''\r",
		"\r",
		"SELECT emp.EmployeeId, emp.Trigram 'Emp Trigram', emp.Lastname + ' ' + emp.Firstname 'Employee Fullname'\r",
		"       ,man.EmployeeId 'ManagerId', man.Trigram 'Manager Trigram', man.Lastname + ' ' + man.Firstname 'Manager Fullname'\r",
		"     \r",
		"FROM Employee emp \r",
		"JOIN Employee man ON emp.ManagerId = man.EmployeeId\r",
		"WHERE @employeeid <> 0 AND emp.EmployeeId = @employeeid\r",
		"    OR @trigram <> '' AND emp.Trigram = @trigram\r",
		"    OR @lastname <> '' AND emp.Lastname LIKE @lastname\r",
		"    OR @firstname <> '' AND emp.Firstname LIKE @firstname\r",
		"    OR @managerid <> 0 AND emp.ManagerId = @managerid\r",
		"    OR @managertrg <> '' AND man.Trigram = @managertrg\r",
		"    OR @managerlname <> '' AND man.Lastname LIKE @managerlname\r",
		"    OR @managerfname <> '' AND man.Firstname LIKE @managerfname\r",
		"\r",
		"SELECT EMPM.EmployeeManagerId, EMPM.EmployeeId, EMPM.ManagerId, \r",
		"MAN.Lastname + ' ' + MAN.Firstname 'Manager Fullname',\r",
		"EMPM.ManagerTypeId, MT.Label\r",
		"FROM Employee_Manager EMPM \r",
		"JOIN ManagerType MT ON MT.ManagerTypeId = EMPM.ManagerTypeId\r",
		"JOIN Employee EMP ON EMPM.EmployeeId = EMP.EmployeeId\r",
		"JOIN Employee MAN ON EMPM.ManagerId = MAN.EmployeeId\r",
		"WHERE EMPM.EmployeeId = @employeeid\r",
		"\r",
		"SELECT ET.TransferId, ET.EmployeeId, ETM.ManagerId, \r",
		"Manager.Lastname + ' ' + Manager.Firstname 'Manager Name', \r",
		"ETM.IsNewManager,\r",
		"ETM.ManagerTypeId,\r",
		"ET.TransferDate, ET.Comment, ET.StatusId, ETS.Label, ET.CreatedDate, ET.IsDisabled\r",
		"\r",
		"FROM Employee_Transfer ET\r",
		"JOIN Employee_TransferStatus ETS ON ET.StatusId = ETS.TransferStatusId\r",
		"JOIN Employee_Transfer_Manager ETM ON ET.TransferId = ETM.TransferId\r",
		"JOIN Employee Manager ON ETM.ManagerId = Manager.EmployeeId\r",
		"\r",
		"WHERE ET.EmployeeId = @employeeid AND ETM.ManagerTypeId = @managerTypeId \r",
		"-- AND ET.StatusId = 3 \r",
		"AND (ET.IsDisabled = 0 OR ET.IsDisabled IS NULL)\r",
		"ORDER BY ET.TransferDate DESC"
	  ],
	  "description": "Employee Transfer Analysis"
	},
	"Fix clr enabled": {
	  "prefix": "Fix clr enabled",
	  "scope": "sql",
	  "body": [
		"EXEC sp_configure 'clr enabled', 1;  RECONFIGURE\r",
		"ALTER DATABASE SMART_Amaris SET trustworthy ON"
	  ],
	  "description": "Fix CLR SQL"
	},
	"Update By Pass": {
	  "prefix": "Update ByPass",
	  "scope": "sql",
	  "body": [
		"UPDATE [Security].[BypassRole]\r",
		"SET IsValidated = $1\r",
		"WHERE BypassRoleId IN ($2) "
	  ],
	  "description": "Update ByPass"
	},
	"Investigate Candidate Need": {
	  "prefix": "Investigate CandidateNeed",
	  "scope": "sql",
	  "body": [
		";WITH\r",
		"CandidateNeed(CandidateId, Firstname, Lastname, CandidateEmail, AdminFileId, HoldingId)\r",
		"AS\r",
		"(\r",
		"    SELECT Id, Firstname, Lastname, Email, AdminFileId, HoldingId  FROM Candidate WHERE StatusId = 8\r",
		")\r",
		"\r",
		"SELECT CN.CandidateId, CN.Firstname, CN.Lastname, CN.CandidateEmail, CN.AdminFileId, CN.HoldingId, NE.NeedId, NE.ManagerId, MAX([NE].UpdatedDate) as UpdatedDate\r",
		"                FROM [dbo].Event [EV]\r",
		"\t\t\t\tJOIN CandidateNeed CN on EV.CandidateID = CN.CandidateId\r",
		"                join [dbo].EventForNeed [EVFN] ON EVFN.EventId = EV.ID \r",
		"                JOIN [SMART].Need [NE] ON EVFN.NeedId = NE.NeedId and NE.StatusId = 2\r",
		"                where EV.ActionID = 27\r",
		"                group by CN.CandidateId, CN.Firstname, CN.Lastname, CN.CandidateEmail, CN.AdminFileId, CN.HoldingId, [NE].NeedId, NE.ManagerId"
	  ],
	  "description": "Investigate CandidateNeed"
	},
	"Create link between app": {
	  "prefix": "Create link between app",
	  "scope": "sql",
	  "body": [
		"USE [SMART_Amaris]\r",
		"GO\r",
		"\r",
		"INSERT INTO [Security].[FakeAuthentication_LinkedApplication]\r",
		"           ([ApplicationId]\r",
		"           ,[LinkedApplicationId])\r",
		"     VALUES\r",
		"           (29, 722)\r",
		"GO\r",
		"\r",
		"select * from CMDB_ParentBusinessServices where Description like 'Employee'\r",
		"select * from CMDB_ParentBusinessServices where Description like '%arian%'"
	  ],
	  "description": "Create link between app"
	},
	"Make super user": {
	  "prefix": "Make super user",
	  "scope": "sql",
	  "body": [
		"INSERT INTO CMDB_Admin (EmployeeId, Login, IsSuperAdmin) \r",
		"VALUES (6424,'hdang-pc\\hdang',1)"
	  ],
	  "description": "Make super user"
	},
	"Get WithTree": {
	  "prefix": "Get WithTree",
	  "scope": "sql",
	  "body": [
		"DECLARE @EmployeesSecured TABLE\r",
		"    (\r",
		"    \tEntityId int,\r",
		"\t\tRoleId bigint,\r",
		"\t\tBusinessRole int\r",
		"    );\r",
		"     \r",
		"INSERT INTO @EmployeesSecured\r",
		"EXEC [Security].[GetWithTree] Employee, $1\r",
		"\r",
		"SELECT Trigram, EMP.Lastname, EMP.Firstname, EMP.ManagerId FROM Employee EMP\r",
		"JOIN @EmployeesSecured ES ON EMP.EmployeeId = ES.EntityId"
	  ],
	  "description": ""
	},
	"Salary package analysis": {
	  "prefix": "Salary package analysis",
	  "scope": "sql",
	  "body": [
		"If(OBJECT_ID('tempdb..#SecuredEmployees') Is Not Null)\r",
		"Begin\r",
		"    Drop Table #SecuredEmployees\r",
		"End\r",
		"CREATE TABLE #SecuredEmployees\r",
		"(\r",
		"       EntityId int,\r",
		"       RoleId int,\r",
		"       BusinessRole int\r",
		")\r",
		"INSERT INTO #SecuredEmployees\r",
		"EXEC Security.GetWithTree 'Employee', $1, NULL, NULL, 'dbo', 'EmployeeId'\r",
		"\r",
		"If(OBJECT_ID('tempdb..#AllContracts') Is Not Null)\r",
		"BEGIN\r",
		"    DROP TABLE #AllContracts\r",
		"END\r",
		"CREATE TABLE #AllContracts\r",
		"(\r",
		"\tContractTypeId INT, Title VARCHAR(255), StartDate DATETIME2(7), EndDate DATETIME2(7), \r",
		"\tEmployeeId INT,\tEmployeeStatusId INT\r",
		")\r",
		"\r",
		"If(OBJECT_ID('tempdb..#PossibleSpContract') Is Not Null)\r",
		"BEGIN\r",
		"    DROP TABLE #PossibleSpContract\r",
		"END\r",
		"CREATE TABLE #PossibleSpContract\r",
		"(\r",
		"\tContractTypeId INT, Title VARCHAR(255), StartDate DATETIME2(7), EndDate DATETIME2(7), \r",
		"\tEmployeeId INT, PackageNumberForEmployee INT\r",
		")\r",
		"\r",
		"INSERT INTO #AllContracts\r",
		"\tSELECT CSP.ContractTypeId, CT.Title, CSP.StartDate, CSP.EndDate, CSP.EmployeeId, EMP.EmployeeStatusId\r",
		"\tFROM SalaryPackage.SalaryPackage [CSP] WITH(NOLOCK)\r",
		"\tLEFT OUTER JOIN ContractType [CT] \r",
		"\tON [CSP].[ContractTypeId] = [CT].[ContractTypeId]\r",
		"\tLEFT JOIN #SecuredEmployees SEMP ON SEMP.EntityId = CSP.EmployeeId\r",
		"\tLEFT JOIN Employee EMP ON EMP.EmployeeId = SEMP.EntityId\r",
		"\tWHERE \r",
		"\t([CSP].[IsDisabled] IS NULL OR [CSP].[IsDisabled] = 0) \r",
		"\tAND ([CSP].[StatusId] IS NULL OR [CSP].[StatusId] IN (2,3))\r",
		"\tAND [CSP].[ParentId] IS NULL\r",
		"\r",
		"\r",
		"--CURRENT\r",
		"INSERT INTO #PossibleSpContract\r",
		"SELECT CSP.ContractTypeId, [CSP].Title, CSP.StartDate, CSP.EndDate, CSP.EmployeeId,\r",
		"\tROW_NUMBER() OVER (PARTITION BY [CSP].[EmployeeId] ORDER BY [StartDate] DESC) AS [PackageNumberForEmployee]\r",
		"FROM #AllContracts [CSP] \r",
		"WHERE \r",
		"([CSP].StartDate <= CONVERT(date, getdate()) \r",
		"\tAND ([CSP].EndDate IS NULL OR CONVERT(date, [CSP].EndDate) >= CONVERT(date, getdate())\r",
		"OR [CSP].EmployeeStatusId = 4)) --If OUT we get the lastest, else we get the current\r",
		"\r",
		"--FUTURE\r",
		"INSERT INTO #PossibleSpContract\r",
		"SELECT CSP.ContractTypeId, [CSP].Title, CSP.StartDate, CSP.EndDate, CSP.EmployeeId,\r",
		"\tROW_NUMBER() OVER (PARTITION BY [CSP].[EmployeeId] ORDER BY [StartDate] DESC) AS [PackageNumberForEmployee]\r",
		"FROM #AllContracts [CSP] \r",
		"WHERE \r",
		"([CSP].EmployeeStatusId <> 4 -- Only get future package for employee that not out\r",
		"\tAND [CSP].StartDate > CONVERT(date, getdate()))\r",
		"AND CSP.EmployeeId NOT IN (SELECT CRSP.EmployeeId FROM #PossibleSpContract CRSP)\r",
		"\r",
		"--PREVIOUS\r",
		"INSERT INTO #PossibleSpContract\r",
		"SELECT CSP.ContractTypeId, [CSP].Title, CSP.StartDate, CSP.EndDate, CSP.EmployeeId,\r",
		"\tROW_NUMBER() OVER (PARTITION BY [CSP].[EmployeeId] ORDER BY [StartDate] DESC) AS [PackageNumberForEmployee]\r",
		"FROM #AllContracts [CSP] \r",
		"WHERE \r",
		"([CSP].StartDate < CONVERT(date, getdate()) AND CONVERT(date, [CSP].EndDate) < CONVERT(date, getdate()))\r",
		"AND CSP.EmployeeId NOT IN (SELECT CRSP.EmployeeId FROM #PossibleSpContract CRSP)\r",
		"\r",
		"SELECT * FROM #PossibleSpContract WHERE EmployeeId = $2 AND PackageNumberForEmployee = 1"
	  ],
	  "description": "Salary package analysis"
	},
	"Search FK dependencies": {
	  "prefix": "Search FK dependencies",
	  "scope": "sql",
	  "body": [
		"SELECT\r",
		"    FK_Table = FK.TABLE_NAME,\r",
		"    FK_Column = CU.COLUMN_NAME,\r",
		"    PK_Table = PK.TABLE_NAME,\r",
		"    PK_Column = PT.COLUMN_NAME,\r",
		"    Constraint_Name = C.CONSTRAINT_NAME\r",
		"FROM\r",
		"    INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS C\r",
		"INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS FK\r",
		"    ON C.CONSTRAINT_NAME = FK.CONSTRAINT_NAME\r",
		"INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS PK\r",
		"    ON C.UNIQUE_CONSTRAINT_NAME = PK.CONSTRAINT_NAME\r",
		"INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE CU\r",
		"    ON C.CONSTRAINT_NAME = CU.CONSTRAINT_NAME\r",
		"INNER JOIN (\r",
		"            SELECT\r",
		"                i1.TABLE_NAME,\r",
		"                i2.COLUMN_NAME\r",
		"            FROM\r",
		"                INFORMATION_SCHEMA.TABLE_CONSTRAINTS i1\r",
		"            INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE i2\r",
		"                ON i1.CONSTRAINT_NAME = i2.CONSTRAINT_NAME\r",
		"            WHERE\r",
		"                i1.CONSTRAINT_TYPE = 'PRIMARY KEY'\r",
		"           ) PT\r",
		"    ON PT.TABLE_NAME = PK.TABLE_NAME\r",
		"WHERE C.CONSTRAINT_NAME like '$1'"
	  ],
	  "description": "Search FK dependencies"
	},
	"BillingTo Analylis": {
	  "prefix": "BillingTo Analylis",
	  "scope": "sql",
	  "body": [
		"-- * First check raw data from Billing To tables\r",
		"DECLARE @id INT = 11090\r",
		"SELECT * FROM Employee_BillingTo WHERE EmployeeId = @id\r",
		"SELECT * FROM BillingTo WHERE BillingToId \r",
		"IN (SELECT BillingToId FROM Employee_BillingTo WHERE EmployeeId = @id)\r",
		"\r",
		"-- ** Second check sp to get Billing data\r",
		"DECLARE @MyList TABLE\r",
		"(\r",
		"    Imputation varchar(50),\r",
		"    CompanyLabel varchar(50),\r",
		"    EmployeeId int,\r",
		"    EndDate datetime2(7),\r",
		"    Comment varchar(50)\r",
		");\r",
		"\r",
		"--Current billingto\r",
		";WITH\r",
		"CurrentBillingTo(Imputation, CompanyLabel, EmployeeId, EndDate, Comment)\r",
		"AS\r",
		"(\r",
		"    SELECT Imputation, CompanyLabel, EmployeeId, EndDate, Comment\r",
		"    FROM \r",
		"        (\r",
		"          SELECT i.Label 'Imputation', sb.Label 'CompanyLabel', ebt.EmployeeId, ebt.EndDate, 'current' as 'Comment'\r",
		"          FROM Employee_BillingTo ebt\r",
		"          LEFT JOIN dbo.BillingTo b ON b.BillingToId = ebt.BillingToId AND b.IsDisabled = 0\r",
		"          LEFT JOIN dbo.Employee_Imputation i ON i.ImputationId = b.ImputationId\r",
		"          LEFT JOIN Subsidiary.Subsidiary sb ON sb.SubsidiaryId = b.CompanyId\r",
		"          WHERE \r",
		"          --CONVERT(DATE, ebt.StartDate) <= CONVERT(DATE, GETDATE()) \r",
		"          (ebt.EndDate IS NULL OR CONVERT(DATE, ebt.EndDate) >= CONVERT(DATE, GETDATE())) \r",
		"          AND ebt.IsDisabled = 0 \r",
		"        ) AS T\r",
		")\r",
		"\r",
		"INSERT INTO @MyList(Imputation, CompanyLabel, EmployeeId, EndDate, Comment) \r",
		"(SELECT Imputation, CompanyLabel, EmployeeId, EndDate, Comment FROM CurrentBillingTo)\r",
		"\r",
		"\r",
		";WITH\r",
		"LastBillingTo(Imputation, CompanyLabel, EmployeeId, EndDate, Comment)\r",
		"AS\r",
		"(\r",
		"    SELECT Imputation, CompanyLabel, EmployeeId, EndDate, Comment\r",
		"    FROM \r",
		"        (\r",
		"          SELECT i.Label 'Imputation', sb.Label 'CompanyLabel', ebt.EmployeeId, \r",
		"          row_number() over(partition by ebt.EmployeeId order by ebt.EndDate desc) as rn, ebt.EndDate, 'last' as 'Comment'\r",
		"          FROM Employee_BillingTo ebt\r",
		"          LEFT JOIN dbo.BillingTo b ON b.BillingToId = ebt.BillingToId AND b.IsDisabled = 0\r",
		"          LEFT JOIN dbo.Employee_Imputation i ON i.ImputationId = b.ImputationId\r",
		"          LEFT JOIN Subsidiary.Subsidiary sb ON sb.SubsidiaryId = b.CompanyId\r",
		"          WHERE ebt.IsDisabled = 0 AND ebt.EndDate IS NOT NULL\r",
		"        ) AS T\r",
		"    WHERE rn = 1     \r",
		")\r",
		"\r",
		"INSERT INTO @MyList(Imputation, CompanyLabel, EmployeeId, EndDate, Comment) \r",
		"(SELECT Imputation, CompanyLabel, EmployeeId, EndDate, Comment FROM LastBillingTo lbt\r",
		" WHERE EmployeeId NOT IN (SELECT EmployeeId FROM @MyList ml WHERE lbt.EmployeeId = ml.EmployeeId\r",
		" AND ml.Comment LIKE 'current')\r",
		")\r",
		"\r",
		"SELECT * FROM @MyList \r",
		"ORDER BY EmployeeId"
	  ],
	  "description": "BillingTo Analylis"
	},
	
  }